import streamlit as st

st.title("üß† Machine Learning Model Demo")
st.write("Interactive demo of machine learning models.")

from pathlib import Path
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler
from pathlib import Path
import matplotlib.pyplot as plt

import seaborn as sns
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (Scaler) ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
model_path = Path.cwd()/"model_training"/ "modelRF.pkl"
scaler_path = Path.cwd()/"model_training" / "scalerRF.pkl"

with open(model_path, "rb") as file:
    rf_model = pickle.load(file)

with open(scaler_path, "rb") as file:
    scaler = pickle.load(file)
        
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô
def predict_house_price(features):
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
    features_scaled = scaler.transform([features])  
    price_pred = rf_model.predict(features_scaled)
    return price_pred[0]
    

    

# UI ‡∏Ç‡∏≠‡∏á Streamlit
st.title("üè° House Price Prediction")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤")

# ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
area = st.selectbox("Area (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢)", ["Urban", "Semiurban", "Rural"])
coapplicant = st.selectbox("Coapplicant (‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠)", ["Yes", "No"])
dependents = st.number_input("Dependents (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤)", value=0)
income = st.number_input("Income (‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)", value=50000.0)
loan_amount = st.number_input("Loan Amount (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)" ,value=200000.0)
property_age = st.number_input("Property Age (‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô)", value=10)
bedrooms = st.number_input("Bedrooms (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô)",  value=3)
bathrooms = st.number_input("Bathrooms (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥)",  value=2)
area_sqft = st.number_input("Area SqFt (‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡∏ï‡∏£.‡∏ü‡∏∏‡∏ï)", value=1000)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ categorical ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

area_mapping = {"Urban": 2, "Semiurban": 1, "Rural": 0}
coapplicant_mapping = {"Yes": 1, "No": 0}

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
area_value = area_mapping[area]
coapplicant_value = coapplicant_mapping[coapplicant]


# ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
if st.button("üîç Predict Price"):
    input_features = np.array([area_value, coapplicant_value, dependents, income, loan_amount, property_age,
                               bedrooms, bathrooms, area_sqft])
    predicted_price = predict_house_price(input_features)
    st.success(f"üè† ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {predicted_price:,.2f} ‡∏ö‡∏≤‡∏ó")
    
    # Feature Importance Plot
    st.write("### Feature Importance")
    feature_names = ["Area", "Coapplicant", "Dependents", "Income", "Loan Amount", "Property Age", "Bedrooms", "Bathrooms", "Area SqFt"]
    importances = rf_model.feature_importances_
    indices = np.argsort(importances)[::-1]
    
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=importances[indices], y=np.array(feature_names)[indices], palette="viridis")
    ax.set_title("Feature Importance in Random Forest Regression")
    ax.set_xlabel("Importance")
    ax.set_ylabel("Features")
    st.pyplot(fig)
    
    
    
    